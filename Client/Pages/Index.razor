@inject IJSRuntime jsRuntime;
@using BrowserInterop.Extensions;
@using BrowserInterop.Geolocation;

@using Weather.Function;
@using System.Net.Http
@using System.Net.Http.Json
@using System.Threading.Tasks
@inject HttpClient Http

@using Client;
@inject WeatherService weatherService;

@page "/"

    <LayoutSetter>
        <AppContextMenu>
            <MudIconButton Icon="@Icons.Material.Outlined.Refresh" Color="Color.Inherit" Edge="Edge.End" @onclick="UpdateAsync" />
        </AppContextMenu>
    </LayoutSetter>

    <img src="images/wallpaper/forest-night.jpg" class="bg"> 

    <MudContainer id="temperature" MaxWidth="MaxWidth.Small" Style="@($"color:{Colors.Grey.Lighten4};")">
        @if (currentConditions == null)
        {
            <MudProgressCircular Color="Color.Default" Indeterminate="true"  />
        } 
        else
        {
            <h3>@LocationAddress</h3>
            <img src="@IconImage" />
            <h2>@Temperature</h2>    
            <div>
                <span>@Phrase</span>
            </div>
            <div>
                <span>@UpdatedDateTime</span>
            </div>

            <button type="button" @onclick="UpdateAsync">Update Location</button>

            <MudList Clickable="true">
                @if (dailyForecasts != null)
                {
                    @foreach(var forecastItem in dailyForecasts)
                    {
                        <MudListItem>
                            <MudGrid>
                                <MudItem xs="7" style="text-align: left; vertical-align: middle;">
                                    <div style="padding-top: 10px;">@forecastItem.DateText</div>
                                </MudItem>
                                <MudItem xs="3" style="text-align: center;">
                                    <MudAvatar Square="true" Variant="Variant.Outlined" Image="@forecastItem.IconImage" />
                                </MudItem>
                                <MudItem xs="2" style="text-align: right;">
                                    <div style="padding-top: 10px;">23</div>
                                </MudItem>
                            </MudGrid>
                        </MudListItem>
                        <MudDivider />
                    }
                }
            </MudList>


        }
    </MudContainer>
@code 
{
    private WindowNavigatorGeolocation geolocation;
    private GeolocationPosition geolocationPosition;
    private CurrentConditions currentConditions;
    private SearchResultAddress currentAddress;
    private IList<ForecastItem> dailyForecasts = new List<ForecastItem>();

    //private string searchText;

    protected override async Task OnInitializedAsync() 
    {
        await UpdateAsync();
    }

    protected async Task GetGeoLocationAsync()
    {
        var window = await jsRuntime.Window();
        var navigator = await window.Navigator();
        geolocation = navigator.Geolocation;
    } 

    protected async Task GetLocationPositionAsync()
    {
        var options = new PositionOptions
        {
            EnableHighAccuracy = true,
            MaximumAgeTimeSpan = TimeSpan.FromHours(1),
            TimeoutTimeSpan = TimeSpan.FromMinutes(1)
        };

        geolocationPosition = (await geolocation.GetCurrentPosition(options)).Location;
    }

    protected async Task GetCurrentConditionsAsync()
    {
        try 
        {
            currentConditions = await Http.GetFromJsonAsync<CurrentConditions>($"api/CurrentConditions?latitude={@geolocationPosition.Coords.Latitude}&longitude={@geolocationPosition.Coords.Longitude}");
        }
        catch(HttpRequestException e)
        {
            Console.WriteLine($"GetCurrentConditionsAsync {e.Source} - {e.Message}");
        }
    }

    protected async Task GetMuncipalityAsync()
    {
        try
        {
            var searchAddressResult = await Http.GetFromJsonAsync<SearchAddressReverseResult>($"api/CurrentMuncipality?latitude={@geolocationPosition.Coords.Latitude}&longitude={@geolocationPosition.Coords.Longitude}");

            currentAddress = searchAddressResult.Address;    
        }
        catch(HttpRequestException e)
        {
            Console.WriteLine($"GetMuncipalityAsync {e.Source} - {e.Message}");
        }
    } 

    protected async Task GetDailyForecastAsync()
    {
        try
        {
            var duration = 10;
            var dailyForecastResponse = await Http.GetFromJsonAsync<DailyForecastResponse>($"api/DailyForecast?latitude={@geolocationPosition.Coords.Latitude}&longitude={@geolocationPosition.Coords.Longitude}&duration={duration}");

            dailyForecasts.Clear();

            if (dailyForecastResponse != null)
            {
                var forecastNumber = 6;
                var forecastCount = 0;

                foreach (var forecast in dailyForecastResponse.Forecasts)
                {
                    var forecastItem = new ForecastItem
                    {
                        Date = forecast.Date,
                        IconCode = forecast.Day.IconCode
                    };

                    dailyForecasts.Add(forecastItem);

                    forecastCount++;

                    if (forecastCount > forecastNumber)
                        break;
                }

                //Remove the first forecast because that is for today
                dailyForecasts.RemoveAt(0);
            }    
        }
        catch(HttpRequestException e)
        {
            Console.WriteLine($"GetDailyForecastAsync {e.Source} - {e.Message}");
        }
    }

    protected async Task UpdateAsync()
    {
        geolocationPosition = null;
        currentConditions = null;

        await GetGeoLocationAsync();
        await GetLocationPositionAsync();
        await GetCurrentConditionsAsync();
        await GetMuncipalityAsync();
        await GetDailyForecastAsync();
    }

    protected string IconImage
    {
        get => currentConditions == null ? $"images/weather_transparent/1.png" : $"images/weather_transparent/{currentConditions.IconCode}.png";
    }

    protected string LocationAddress
    {
        get => currentAddress == null ? "Unknown" : $"{currentAddress.Municipality},{currentAddress.CountrySubdivision}";
    }
    protected string Temperature
    {
        get => currentConditions == null ? $"--{TemperatureUnit}" : $"{Math.Round(currentConditions.Temperature.Value, 0)}{TemperatureUnit}"; 
    }

    private string TemperatureUnit
    {
        get => "\u2103";
    }

    protected string Phrase
    {
        get => currentConditions == null ? "--------------------" : $"{currentConditions.Phrase}";
    }

    protected string UpdatedDateTime
    {
        get => $"Updated as of {(currentConditions ?? new CurrentConditions()).DateTime:HH:mm}";
    }

    sealed class ForecastItem
    {
        public DateTime Date { get; set; }

        public Int32 IconCode { get; set; }

        public WeatherUnitRange Temperature { get; set; }

        public string DateText
        {
            get 
            {
                var dateText = this.Date.ToString("MMM dd");
                var dayOfWeek = this.Date.ToString("ddd");

                return (DateTime.Now.AddDays(1).Date.Equals(this.Date.Date)) ? $"Tomorrow, {dateText}" : $"{dayOfWeek}, {dateText}";
            }
        }

        public string IconImage
        {
            get => $"images/weather_transparent/{IconCode}.png";
        }
    }
}