@inject IJSRuntime jsRuntime;
@using BrowserInterop.Extensions;
@using BrowserInterop.Geolocation;


@using System.Net.Http
@using System.Threading.Tasks
@inject HttpClient Http

@using Client.Services;
@inject WeatherForecastService weatherService;

@page "/"

    <LayoutSetter>
        <AppContextMenu>
            <MudIconButton Icon="@Icons.Material.Outlined.Refresh" Color="Color.Inherit" Edge="Edge.End" @onclick="UpdateAsync" />
        </AppContextMenu>
    </LayoutSetter>

    <img src="images/wallpaper/forest-night.jpg" class="bg"> 

    <MudContainer id="temperature" MaxWidth="MaxWidth.Small" Style="@($"color:{Colors.Grey.Lighten4};")">
        @if (weatherForecast == null)
        {
            <MudProgressCircular Color="Color.Default" Indeterminate="true"  />
        } 
        else
        {
            <h3>@weatherForecast.LocationAddress</h3>
            <img src="@weatherForecast.IconImage" />
            <h2>@weatherForecast.TemperatureReading</h2>    
            <div>
                <span>@weatherForecast.Phrase</span>
            </div>
            <div>
                <span>@weatherForecast.UpdatedDateTime</span>
            </div>

            <button type="button" @onclick="UpdateAsync">Update Location</button>

            <MudList Clickable="true">
                @if (weatherForecast.DailyForecasts != null)
                {
                    @foreach(var forecastItem in weatherForecast.DailyForecasts)
                    {
                        <MudListItem>
                            <MudGrid>
                                <MudItem xs="7" style="text-align: left; vertical-align: middle;">
                                    <div style="padding-top: 10px;">@forecastItem.DateText</div>
                                </MudItem>
                                <MudItem xs="3" style="text-align: center;">
                                    <MudAvatar Square="true" Variant="Variant.Outlined" Image="@forecastItem.IconImage" />
                                </MudItem>
                                <MudItem xs="2" style="text-align: right;">
                                    <div style="padding-top: 10px;">23</div>
                                </MudItem>
                            </MudGrid>
                        </MudListItem>
                        <MudDivider />
                    }
                }
            </MudList>


        }
    </MudContainer>
@code 
{
    private WindowNavigatorGeolocation geolocation;
    private Location location;
    private WeatherForecast weatherForecast;
    //private string searchText;

    protected override async Task OnInitializedAsync() 
    {
        await UpdateAsync();
    }

    protected async Task GetGeoLocationAsync()
    {
        var window = await jsRuntime.Window();
        var navigator = await window.Navigator();
        geolocation = navigator.Geolocation;
    } 

    protected async Task GetLocationPositionAsync()
    {
        var options = new PositionOptions
        {
            EnableHighAccuracy = true,
            MaximumAgeTimeSpan = TimeSpan.FromHours(1),
            TimeoutTimeSpan = TimeSpan.FromMinutes(1)
        };

        var geolocationPosition = (await geolocation.GetCurrentPosition(options)).Location;

        location = new Location
        {
            Longitude = geolocationPosition.Coords.Longitude,
            Latitude = geolocationPosition.Coords.Latitude
        };
    }

    protected async Task GetWeatherForecastAsync()
    {
        weatherForecast = await weatherService.GetWeatherForecastAsync(location);
    }

    protected async Task UpdateAsync()
    {
        location = null;
        weatherForecast = null;

        await GetGeoLocationAsync();
        await GetLocationPositionAsync();
        await GetWeatherForecastAsync();
    }
}