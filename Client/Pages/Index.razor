@inject IJSRuntime jsRuntime;
@using BrowserInterop.Extensions;
@using BrowserInterop.Geolocation;

@using Data;
@using System.Net.Http
@using System.Net.Http.Json
@using System.Threading.Tasks
@inject HttpClient Http

@using Client;
@inject WeatherService weatherService;

@page "/"

    <LayoutSetter>
        <AppContextMenu>
            <MudIconButton Icon="@Icons.Material.Outlined.Refresh" Color="Color.Inherit" Edge="Edge.End" @onclick="UpdateAsync" />
        </AppContextMenu>
    </LayoutSetter>

    <img src="images/wallpaper/black_white_raindrop_leaf.jpg" class="bg">

    <MudContainer id="temperature" MaxWidth="MaxWidth.Small" Style="@($"color:{Colors.Grey.Lighten4};")">
        @if (currentConditions == null)
        {
            <MudProgressCircular Color="Color.Default" Indeterminate="true"  />
        } 
        else
        {
            <h3>@LocationAddress</h3>
            <img src="@IconImage" />
            <h2>@Temperature</h2>    
            <div>
                <span>@Phrase</span>
            </div>
            <div>
                <span>@UpdatedDateTime</span>
            </div>

            <button type="button" @onclick="UpdateAsync">Update Location</button>

            <MudList Clickable="true">
                <MudListItem>
                    <MudGrid>
                        <MudItem xs="4" style="text-align: left; vertical-align: middle;">
                            <div style="padding-top: 10px;">Tomorrow, Oct 22</div>
                        </MudItem>
                        <MudItem xs="4" style="text-align: center;">
                            <MudAvatar Square="true" Variant="Variant.Outlined" Image="@IconImage" />
                        </MudItem>
                        <MudItem xs="4" style="text-align: right;">
                            <div style="padding-top: 10px;">23</div>
                        </MudItem>
                    </MudGrid>
                </MudListItem>
                <MudDivider />
                <MudListItem>
                    <MudGrid>
                        <MudItem xs="4" style="text-align: left; vertical-align: middle;">
                            <div style="padding-top: 10px;">Sat, Oct 23</div>
                        </MudItem>
                        <MudItem xs="4" style="text-align: center;">
                            <MudAvatar Square="true" Variant="Variant.Outlined" Image="@IconImage" />
                        </MudItem>
                        <MudItem xs="4" style="text-align: right;">
                            <div style="padding-top: 10px;">23</div>
                        </MudItem>
                    </MudGrid>
                </MudListItem>
                <MudDivider />
                <MudListItem>
                    <MudGrid>
                        <MudItem xs="4" style="text-align: left; vertical-align: middle;">
                            <div style="padding-top: 10px;">Sun, Oct 24</div>
                        </MudItem>
                        <MudItem xs="4" style="text-align: center;">
                            <MudAvatar Square="true" Variant="Variant.Outlined" Image="@IconImage" />
                        </MudItem>
                        <MudItem xs="4" style="text-align: right;">
                            <div style="padding-top: 10px;">23</div>
                        </MudItem>
                    </MudGrid>
                </MudListItem>
                <MudDivider />
                <MudListItem>
                    <MudGrid>
                        <MudItem xs="4" style="text-align: left; vertical-align: middle;">
                            <div style="padding-top: 10px;">Mon, Oct 25</div>
                        </MudItem>
                        <MudItem xs="4" style="text-align: center;">
                            <MudAvatar Square="true" Variant="Variant.Outlined" Image="@IconImage" />
                        </MudItem>
                        <MudItem xs="4" style="text-align: right;">
                            <div style="padding-top: 10px;">23</div>
                        </MudItem>
                    </MudGrid>
                </MudListItem>
                <MudDivider />
                <MudListItem>
                    <MudGrid>
                        <MudItem xs="4" style="text-align: left; vertical-align: middle;">
                            <div style="padding-top: 10px;">Tue, Oct 26</div>
                        </MudItem>
                        <MudItem xs="4" style="text-align: center;">
                            <MudAvatar Square="true" Variant="Variant.Outlined" Image="@IconImage" />
                        </MudItem>
                        <MudItem xs="4" style="text-align: right;">
                            <div style="padding-top: 10px;">23</div>
                        </MudItem>
                    </MudGrid>
                </MudListItem>
            </MudList>


        }
    </MudContainer>
@code 
{
    private WindowNavigatorGeolocation geolocation;
    private GeolocationPosition geolocationPosition;
    private CurrentConditions currentConditions;

    private SearchResultAddress currentAddress;

    //private string searchText;

    protected override async Task OnInitializedAsync() 
    {
        await GetGeoLocationAsync();
        await GetLocationPositionAsync();
        await GetCurrentConditionsAsync();
        await GetMuncipalityAsync();
    }

    protected async Task GetGeoLocationAsync()
    {
        var window = await jsRuntime.Window();
        var navigator = await window.Navigator();
        geolocation = navigator.Geolocation;
    } 

    protected async Task GetLocationPositionAsync()
    {
        var options = new PositionOptions
        {
            EnableHighAccuracy = true,
            MaximumAgeTimeSpan = TimeSpan.FromHours(1),
            TimeoutTimeSpan = TimeSpan.FromMinutes(1)
        };

        geolocationPosition = (await geolocation.GetCurrentPosition(options)).Location;
    }

    protected async Task GetCurrentConditionsAsync()
    {
        currentConditions = await Http.GetFromJsonAsync<CurrentConditions>($"api/CurrentConditions?latitude={@geolocationPosition.Coords.Latitude}&longitude={@geolocationPosition.Coords.Longitude}");
    }

    protected async Task GetMuncipalityAsync()
    {
        var searchAddressResult = await Http.GetFromJsonAsync<SearchAddressReverseResult>($"api/CurrentMuncipality?latitude={@geolocationPosition.Coords.Latitude}&longitude={@geolocationPosition.Coords.Longitude}");

        currentAddress = searchAddressResult.Address;    
    } 

    protected async Task UpdateAsync()
    {
        geolocationPosition = null;
        currentConditions = null;

        await GetLocationPositionAsync();
        await GetCurrentConditionsAsync();
    }

    protected string IconImage
    {
        get => currentConditions == null ? $"images/weather_transparent/1.png" : $"images/weather_transparent/{currentConditions.IconCode}.png";
    }

    protected string LocationAddress
    {
        get => currentAddress == null ? "Unknown" : $"{currentAddress.Municipality},{currentAddress.CountrySubdivision}";
    }
    protected string Temperature
    {
        get => currentConditions == null ? $"--{TemperatureUnit}" : $"{Math.Round(currentConditions.Temperature.Value, 0)}{TemperatureUnit}"; 
    }

    private string TemperatureUnit
    {
        get => "\u2103";
    }

    protected string Phrase
    {
        get => currentConditions == null ? "--------------------" : $"{currentConditions.Phrase}";
    }

    protected string UpdatedDateTime
    {
        get => $"Updated as of {(currentConditions ?? new CurrentConditions()).DateTime:HH:mm}";
    }
}