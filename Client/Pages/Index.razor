@inject IJSRuntime jsRuntime;
@using BrowserInterop.Extensions;
@using BrowserInterop.Geolocation;

@using Data;
@using System.Net.Http
@using System.Net.Http.Json
@using System.Threading.Tasks
@inject HttpClient Http

@using Client;
@inject WeatherService weatherService;

@page "/"

    <MudToolBar Style="@($"background-color:{Colors.Grey.Lighten4};")">
        <MudText Typo="Typo.h6" >Forecast</MudText>
        <MudSpacer />
        <MudIconButton Icon="@Icons.Material.Outlined.Refresh" @onclick="UpdateAsync" />
        <MudIconButton Icon="@Icons.Material.Outlined.Favorite" />
        <MudIconButton Icon="@Icons.Material.Outlined.Pin" />
        <MudSpacer />
        <MudItem xs="12" sm="6" md="3" >
            <MudTextField @bind-Value="searchText" Placeholder="Search" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Outlined.Search" Variant="Variant.Text" />
        </MudItem>
    </MudToolBar>

    <MudPaper Class="pa-16 ma-2" Elevation="0" >
        <MudContainer id="temperature" MaxWidth="MaxWidth.Small">
            <img src="@IconImage" />
            <h2>@Temperature</h2>    
            <div>
                <span>@Phrase</span>
            </div>
            <div>
                <span>@UpdatedDateTime</span>
            </div>
            <button type="button" @onclick="UpdateAsync">Update Location</button>
        </MudContainer>
    </MudPaper>




@if (geolocationPosition != null)
{
    <h5>Location: @geolocationPosition.Coords.Latitude, @geolocationPosition.Coords.Longitude Accuracy: @geolocationPosition.Coords.Accuracy m</h5>
}

@code 
{
    private WindowNavigatorGeolocation geolocation;
    private GeolocationPosition geolocationPosition;
    private CurrentConditions currentConditions;
    private string searchText;

    protected override async Task OnInitializedAsync() 
    {
        await GetGeoLocationAsync();
        await GetLocationPositionAsync();
        await GetCurrentConditionsAsync();
    }

    protected async Task GetGeoLocationAsync()
    {
        var window = await jsRuntime.Window();
        var navigator = await window.Navigator();
        geolocation = navigator.Geolocation;
    } 

    protected async Task GetLocationPositionAsync()
    {
        var options = new PositionOptions
        {
            EnableHighAccuracy = true,
            MaximumAgeTimeSpan = TimeSpan.FromHours(1),
            TimeoutTimeSpan = TimeSpan.FromMinutes(1)
        };

        geolocationPosition = (await geolocation.GetCurrentPosition(options)).Location;
    }

    protected async Task GetCurrentConditionsAsync()
    {
        currentConditions = await Http.GetFromJsonAsync<CurrentConditions>($"api/CurrentConditions?latitude={@geolocationPosition.Coords.Latitude}&longitude={@geolocationPosition.Coords.Longitude}");
    }

    protected async Task UpdateAsync()
    {
        await GetLocationPositionAsync();
        await GetCurrentConditionsAsync();
    }

    protected string IconImage
    {
        get => currentConditions == null ? $"images/weather/1.png" : $"images/weather/{currentConditions.IconCode}.png";
    }

    protected string Temperature
    {
        get => currentConditions == null ? $"--.-{TemperatureUnit}" : $"{currentConditions.Temperature.Value}{TemperatureUnit}"; 
    }

    private string TemperatureUnit
    {
        get => "\u2103";
    }

    protected string Phrase
    {
        get => currentConditions == null ? "--------------------" : $"{currentConditions.Phrase}";
    }

    protected string UpdatedDateTime
    {
        get => $"Updated as of {(currentConditions ?? new CurrentConditions()).DateTime:HH:mm}";
    }
}